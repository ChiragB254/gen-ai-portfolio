name: Continuous Integration

on:
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'README.md'
      - 'DEPLOYMENT.md'
      - '.gitignore'
      - 'docs/**'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Lint and Build Job
  lint-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_TELEMETRY_DISABLED: 1
        
    - name: Run tests
      run: npm test --if-present || echo "No test script found"
      
    - name: Build for production
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_TELEMETRY_DISABLED: 1
        
    - name: Check build size
      run: |
        echo "Build completed successfully!"
        if [ -d ".next" ]; then
          echo "Build directory size:"
          du -sh .next/
        fi

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: Check for outdated packages
      run: npm outdated || true

  # Comment on PR with results
  pr-comment:
    needs: [lint-and-build, security-audit]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'pull_request'
    
    steps:
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const lintBuildResult = '${{ needs.lint-and-build.result }}';
          const securityResult = '${{ needs.security-audit.result }}';
          
          let emoji = '‚úÖ';
          let status = 'passed';
          
          if (lintBuildResult === 'failure') {
            emoji = '‚ùå';
            status = 'failed';
          } else if (lintBuildResult === 'cancelled') {
            emoji = '‚èπÔ∏è';
            status = 'cancelled';
          }
          
          const body = `${emoji} **CI Check ${status}**
          
          **Build & Test:** ${lintBuildResult === 'success' ? '‚úÖ Passed' : lintBuildResult === 'failure' ? '‚ùå Failed' : '‚èπÔ∏è Cancelled'}
          **Security Audit:** ${securityResult === 'success' ? '‚úÖ Passed' : securityResult === 'failure' ? '‚ö†Ô∏è Issues found' : '‚èπÔ∏è Cancelled'}
          
          ${lintBuildResult === 'success' ? 
            'üöÄ Ready for review and merge!' : 
            'üîß Please fix the issues before merging.'}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          })